@using GrowBox.Abstractions.Model
@using Blazor.MinimalApi.Client
@using GrowBox.Controls.Overlay
@using GrowBox.Controls.Overlays

@page "/grow/{GrowId:guid}"

@inject MinimalHttpClient<Grow> GrowRead
@inject MinimalHttpClient<Grow, Grow> GrowWrite
@inject MinimalHttpClient<GrowDiaryNote, GrowDiaryNote> GrowDiaryNoteWrite
@inject NavigationManager NavigationManager
@inject ILogger<GrowBoxCreate> Logger
@inject NotificationService NotificationService
@inject IOverlayService OverlayService
@inject IJSRuntime Js

@if (_grow is not null)
{
    <RadzenStack Gap="0.5rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Stretch">
        <RadzenCard Variant="Variant.Filled">
            <div class="accordion">
                <div class="accordion-label" @onclick="@(() => _accordionExpanded = !_accordionExpanded)">
                    <RadzenStack JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal" Gap="0.5rem" Style="width: 100%">
                        <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                            <RadzenText TextStyle="TextStyle.Subtitle1" style="margin-bottom: 0;">@_grow.Name</RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" style="margin-bottom: 0;">@_grow.Created.ToString("M")</RadzenText>
                        </RadzenStack>
                        <RadzenStack JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal" Gap="0.5rem">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Dark" Click=@(() => NavigationManager.NavigateTo($"/grow/{_grow.Id}/edit"))/>
                            <RadzenButton Icon="note_add" ButtonStyle="ButtonStyle.Dark" @onclick=@(() => { _accordionExpanded = !_accordionExpanded; })/>
                        </RadzenStack>
                    </RadzenStack>
                </div>
                <div class="accordion-content" data-accordion-expanded="@_accordionExpanded">
                    <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem" Style="margin-top: 0.5rem">
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center"
                                     JustifyContent="JustifyContent.SpaceBetween">
                            <RadzenButton Icon="save" Click="@(async () => await CreateOrUpdateNote())"/>
                            <RadzenDatePicker @bind-Value=@_editNote.Created ShowTime="true" ShowSeconds="false" HoursStep="1" MinutesStep="10" SecondsStep="1" DateFormat="dd.MM.yyyy HH:mm" Name="DatePickerWithTime"/>
                        </RadzenStack>
                        <RadzenHtmlEditor @bind-Value=@_editNote.Text style="height: 400px;" UploadUrl="upload/image" Execute="@OnExecute">
                            <RadzenHtmlEditorUndo/>
                            <RadzenHtmlEditorRedo/>
                            <RadzenHtmlEditorSeparator/>
                            <RadzenHtmlEditorBold/>
                            <RadzenHtmlEditorItalic/>
                            <RadzenHtmlEditorUnderline/>
                            <RadzenHtmlEditorStrikeThrough/>
                            <RadzenHtmlEditorSeparator/>
                            <RadzenHtmlEditorCustomTool CommandName="InsertSnapshot" Icon="add_a_photo" Title="Insert snapshot"/>
                        </RadzenHtmlEditor>
                        <RadzenStack JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal" Gap="0.5rem" Style="width: 100%">
                            <div> &nbsp; </div>
                            <RadzenButton Icon="delete_forever" ButtonStyle="ButtonStyle.Danger" Click="@(async () => await DeleteEditNote())"/>
                        </RadzenStack>
                    </RadzenStack>
                </div>
            </div>
        </RadzenCard>
        <RadzenTimeline AlignItems="AlignItems.Center" LinePosition="LinePosition.Alternate" style="max-width: 600px; margin: 0 auto;">
            <Items>
                @foreach (var note in _grow.GrowDiaryNotes.OrderByDescending(x => x.Created))
                {
                    var noteTime = note.Created.ToString("d");
                    if (note.Created > DateTime.Now.Date - TimeSpan.FromDays(6))
                        noteTime = note.Created.ToString("dddd") + " - " + note.Created.ToString("t");
                    <RadzenTimelineItem @key="note.Id" Size="PointSize.Medium" PointStyle="PointStyle.Info">
                        <LabelContent>
                            <RadzenBadge 
                                BadgeStyle="BadgeStyle.Info" 
                                IsPill="true" 
                                Text="@noteTime" 
                                Style="cursor:pointer;"
                                @onclick="@(async () => await EditNote(note))"/>
                        </LabelContent>
                        <ChildContent><div style="text-wrap: normal; word-wrap: break-word;">@((MarkupString)note.Text)</div></ChildContent>
                    </RadzenTimelineItem>
                }
            </Items>
        </RadzenTimeline>
    </RadzenStack>
}

@code
{
    private Grow? _grow;
    private GrowDiaryNote _editNote = default!;
    private bool _accordionExpanded = false;
    
    [Parameter] 
    public Guid GrowId { get; set; }

    private async Task EditNote(GrowDiaryNote note)
    {
        _editNote = note;
        _accordionExpanded = true;
        await Js.InvokeVoidAsync("eval", "document.getElementById('app-body').scrollTop = 0;");
    }
    
    private async Task DeleteEditNote()
    {
        if (_grow == null || _editNote.Id == Guid.Empty) return;

        if (!await OverlayService.ConfirmDelete("Grow Diary Note"))
            return;
        
        try
        {
            _grow.GrowDiaryNotes.Remove(_grow.GrowDiaryNotes.First(x => x.Id == _editNote.Id));
            await GrowDiaryNoteWrite.Delete(_editNote);
            _editNote = new GrowDiaryNote { Created = DateTime.Now, GrowId = GrowId };
            _accordionExpanded = false;
        }
        catch (Exception e)
        {
            var message = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Note Deletion",
                Detail = "Failed.",
                Duration = 2000
            };
            NotificationService.Notify(message);
            Logger.LogError(e, "Failed to DeleteNote.");
        }
    }

    private async Task CreateOrUpdateNote()
    {
        if (_grow == null) return;
        try
        {
            if (_editNote.Id == Guid.Empty)
                _grow.GrowDiaryNotes.Add(_editNote);
            var result = await GrowWrite.Update(_grow);
            if (result != null)
            {
                _grow = result;
                _editNote = new GrowDiaryNote { Created = DateTime.Now, GrowId = GrowId };
            }
        }
        catch (Exception e)
        {
            var message = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Note Create/Edit",
                Detail = "Failed.",
                Duration = 2000
            };
            NotificationService.Notify(message);
            Logger.LogError(e, "Failed to submit note.");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (GrowId == Guid.Empty)
            return;

        try
        {
            _editNote = new() { Created = DateTime.Now, GrowId = GrowId };
            _grow = await GrowRead.Get(query: new QueryParameters()
                .With("id", GrowId)
                .With("withNavigationProperties", true));

            if (_grow?.GrowDiaryNotes.Count <= 0)
                _accordionExpanded = true;
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Failed to request Grow.");
        }
    }
    
    async Task OnExecute(HtmlEditorExecuteEventArgs args)
    {
        if (args.CommandName == "InsertSnapshot")
        {
            if (_grow == null) return;
            var snapshotSelection = await OverlayService
                .ShowOverlay<SnapshotSelectionOverlay, SnapshotSelection>(
                    new SnapshotSelection(_grow.GrowBoxId));
            
            if (snapshotSelection.Success)
                await InsertSnapshot(args.Editor, snapshotSelection.Data?.DiarySnapshot?.Url ?? "");
        }
    }

    async Task InsertSnapshot(RadzenHtmlEditor editor, string snapshot)
    {
        await editor.ExecuteCommandAsync(HtmlEditorCommands.InsertHtml, 
            $"<img id=\"webCam\" src=\"{snapshot}\" style=\"width: 100%; object-fit:cover; max-height:40vh; border-radius: 8px;\" alt=\"snapshot\"/>");
    }
}
