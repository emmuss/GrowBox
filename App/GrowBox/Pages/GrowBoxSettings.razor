@using GrowBox.State
@using GrowBox.Abstractions.Model.EspApi
@using GrowBox.Controls.Overlay
@using GrowBox.Controls.Overlays
@using GrowBox.Services

@page "/growbox/{GrowBoxId:guid}/settings"

@inject App App
@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject IOverlayService OverlayService
@inject IWaterPumpsEsp WaterPumpsService

@if (_growBoxRoot != null && _appGrowBox != null) 
{
    <RadzenStack Gap="1rem" JustifyContent="JustifyContent.Stretch">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenButton Icon="arrow_back" ButtonStyle="ButtonStyle.Dark" Click=@(() => Js.InvokeVoidAsync("history.back")) />
            <RadzenButton Icon="settings" ButtonStyle="ButtonStyle.Dark" Click=@(() => NavigationManager.NavigateTo($"/growbox/{_appGrowBox.GrowBox.Id}/edit")) />
        </RadzenStack>
        <RadzenCard Variant="Variant.Filled">
            <RadzenStack Gap="1rem">
                <div style="display: flex; justify-content: start; align-items: center; gap: 8px;">
                    <RadzenIcon Icon="tune" /> 
                    <RadzenText TextStyle="TextStyle.Overline" TextAlign="TextAlign.Center" style="margin-bottom: 0;">Fan Speed</RadzenText>
                </div>
                <RadzenSlider 
                    TValue="int" style="width: 100%;" Step="1" Min="0" Max="255"
                    @bind-Value:get=_fanSpeed
                    @bind-Value:set="(x) => _fanSpeed = 255 - x" />
                <RadzenButton Text="Set Fan Speed" ButtonStyle="ButtonStyle.Success" Click="SetFanSpeed"/>
            </RadzenStack>
        </RadzenCard>

        <RadzenCard Variant="Variant.Filled">
            <RadzenStack Gap="1rem">
                <div style="display: flex; justify-content: start; align-items: center; gap: 8px;">
                    <RadzenIcon Icon="brightness_low" /> 
                    <RadzenText TextStyle="TextStyle.Overline" TextAlign="TextAlign.Center" style="margin-bottom: 0;">Light</RadzenText>
                </div>
                <RadzenSlider
                    TValue="int" style="width: 100%;" Step="19" Min="-190" Max="0"
                    @bind-Value=_light />
                <div style="display: flex; justify-content: start; align-items: center; gap: 8px;">
                    <RadzenIcon Icon="schedule"/>
                    <RadzenCheckBox
                        TValue="bool" Name="_sunScheduleEnabled"
                        @bind-Value=@_sunScheduleEnabled/>
                    <RadzenLabel Text="Enable Sun Schedule" Component="_sunScheduleEnabled" Style="margin-left: 8px; vertical-align: middle;"></RadzenLabel>
                </div>
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <RadzenText TextStyle="TextStyle.Overline" style="margin-bottom: 0;">@_rise.ToString(@"hh\:mm\:ss")</RadzenText>
                    <div style="display: flex; justify-content: start; align-items: center;">
                        <RadzenIcon Icon="north_east" />
                        <RadzenIcon Icon="sunny" /> 
                    </div>                    
                    <RadzenText TextStyle="TextStyle.Overline" style="margin-bottom: 0;">@_sunDuration.ToString(@"hh\:mm\:ss")</RadzenText>
                    <div style="display: flex; justify-content: start; align-items: center;">
                        <RadzenIcon Icon="sunny" /> 
                        <RadzenIcon Icon="south_east" />
                    </div>                    
                    <RadzenText TextStyle="TextStyle.Overline" style="margin-bottom: 0;">@_set.ToString(@"hh\:mm\:ss")</RadzenText>
                </div>
                <RadzenSlider
                    @bind-Value=@RiseAndSet 
                    TValue="IEnumerable<int>" style="width: 100%;" Step="1800" Min="0" Max="86400" Range="true" />
                <RadzenButton Text="Set Light" ButtonStyle="ButtonStyle.Success" Click="UpdateLight"/>
            </RadzenStack>
        </RadzenCard>
        
        <RadzenCard Variant="Variant.Filled">
            <RadzenStack Gap="1rem">
                <div style="display: flex; justify-content: start; align-items: center; gap: 8px;">
                    <div>
                        <RadzenIcon Icon="water"/>
                    </div>
                    <RadzenText TextStyle="TextStyle.Overline" style="margin-bottom: 0;">Pumps</RadzenText>
                </div>
                
                <div>
                    <RadzenNumeric TValue="int" Format="# ml / min"  @bind-Value="_pumpMilliLiterPerMinute" Name="_pumpMilliLiterPerMinute" />
                    <RadzenLabel Text="Pump Volume" Component="_pumpMilliLiterPerMinute" Style="margin-left: 8px; vertical-align: middle;"></RadzenLabel>
                </div>
                @foreach (var pump in _waterPumpsRoot?.Pumps ?? Array.Empty<WaterPump>())
                {
                    <div style="display: flex; justify-content: space-between; align-items: center; gap: 8px;">
                        <RadzenText TextStyle="TextStyle.Overline" TextAlign="TextAlign.Start" style="margin-bottom: 0;">Pump @pump.Id</RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" TextAlign="TextAlign.Start" style="margin-bottom: 0;">@pump.LastRun.ToDateFromUnixSeconds()</RadzenText>
                    </div>
                    <RadzenStack Gap="1rem" Style="margin-left: 1rem">
                        <div style="display: flex; justify-content: start; align-items: center; gap: 8px;">
                            <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Start" style="margin-bottom: 0; text-wrap: nowrap;">@(_pumpMilliLiterPerMinute * TimeSpan.FromSeconds(pump.Duration).TotalMinutes) ml</RadzenText>
                            <RadzenSlider @bind-Value=@pump.Duration TValue="int" style="width: 100%;" Step="60" Min="0" Max="@PumpMaximumSeconds" />
                            <RadzenButton Icon="play_arrow" ButtonStyle="ButtonStyle.Danger" Click="async () => await TestPump(pump)" />
                        </div>
                        <div style="display: flex; justify-content: start; align-items: center; gap: 8px;">
                            <RadzenIcon Icon="schedule"/>
                            <RadzenCheckBox
                                @bind-Value:get="(pump.AutoPumpBegin > -1)"
                                @bind-Value:set="(x)=> pump.AutoPumpBegin = x ? 16200 : -1"
                                TValue="bool" />
                            @if (pump.AutoPumpBegin > -1)
                            {
                                <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Start" style="margin-bottom: 0; text-wrap: nowrap;">
                                    @TimeSpan.FromSeconds(pump.AutoPumpBegin)
                                </RadzenText>
                                <RadzenSlider @bind-Value=@pump.AutoPumpBegin TValue="int" style="width: 100%;" Step="@((30 * 60).ToString())" Min="-1" Max="@(60 * 60 * 24)"/>
                            }
                        </div>
                    </RadzenStack>
                }
                <RadzenButton Text="Set Pumps" ButtonStyle="ButtonStyle.Success" Click="UpdatePumps"/>
            </RadzenStack>
        </RadzenCard>
        
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click=@(async () => { await DeleteGrowBox(); } ) />
        </RadzenStack>
    </RadzenStack>    
}


@code
{
    private AppGrowBox? _appGrowBox;
    private GrowBoxEspRoot? _growBoxRoot;
    private WaterPumpsEspRoot? _waterPumpsRoot;
    private int _pumpMilliLiterPerMinute = 26;
    private int PumpMaximumSeconds => (int)TimeSpan.FromMinutes(3000d / _pumpMilliLiterPerMinute).TotalSeconds;

    private bool _sunScheduleEnabled = false;

    TimeSpan _rise = TimeSpan.Zero;
    TimeSpan _sunDuration = TimeSpan.Zero;
    TimeSpan _set = TimeSpan.Zero;

    IEnumerable<int> _riseAndSet = new int[] { 21600, 21600 + 64800 };
    IEnumerable<int> RiseAndSet { get => _riseAndSet; set => SetRiseAndSet(value); }

    private async Task DeleteGrowBox()
    {
        if (_appGrowBox is null) return;
        
        if (!await OverlayService.ConfirmDelete("GrowBox"))
            return;
        
        await App.DeleteGrowBox(_appGrowBox.GrowBox); 
        NavigationManager.NavigateTo("/");
    }

    private void SetRiseAndSet(IEnumerable<int> values)
    {
        var riseAndSet = values as int[] ?? values.ToArray();
        _riseAndSet = riseAndSet;
        _rise = TimeSpan.FromSeconds(riseAndSet.First());
        _set = TimeSpan.FromSeconds(riseAndSet.Last());
        _sunDuration = _set - _rise;
    }

    private int _fanSpeed = 0;
    private int _light = 0;

    [Parameter] public Guid GrowBoxId { get; set; } = Guid.Empty;

    private async Task UpdateGrowBoxData(GrowBoxEspRoot? growBoxRoot = null)
    {
        if (_appGrowBox is null)
            return;
        _growBoxRoot = growBoxRoot ?? await _appGrowBox.Service.GrowBoxEsp.Get();
        _fanSpeed = 255 - _growBoxRoot?.FanSpeed ?? 0;
        var light = (_growBoxRoot?.LightSchedule?.SunScheduleEnabled ?? false) ? _growBoxRoot.LightSchedule.SunTargetLight : (_growBoxRoot?.Light ?? 255);
        _light = ((light) - 40)*-1;
        var rise = _growBoxRoot?.LightSchedule?.Sunrise ?? 21600;
        var set = rise + (_growBoxRoot?.LightSchedule?.SunDuration ?? 64800);
        RiseAndSet = [rise, set];
        _sunScheduleEnabled = _growBoxRoot?.LightSchedule?.SunScheduleEnabled ?? false;
    }

    private async Task UpdateWaterPumpsData(WaterPumpsEspRoot? waterPumpsRoot = null)
    {
        if (_appGrowBox is null)
            return;
        _waterPumpsRoot = waterPumpsRoot ?? await _appGrowBox.Service.WaterPumpsEsp.Get();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (GrowBoxId == Guid.Empty)
        {
            return;
        }

        _appGrowBox = App.GetAppGrowBox(GrowBoxId);
        await UpdateGrowBoxData();
        await UpdateWaterPumpsData();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateLight()
    {
        if (_appGrowBox is null)
            return;
        var val = _light;
        var s = (val*-1 + 40);
        s = s > 255 ? 255 : s;
        s = s < 0   ? 0   : s;

        if (_sunScheduleEnabled)
        {
            await UpdateGrowBoxData(
                await _appGrowBox.Service.GrowBoxEsp.SetLightSchedule(
                    new (_sunScheduleEnabled, RiseAndSet.First(), RiseAndSet.Last() - RiseAndSet.First(), s)));
        }
        else
        {
            await UpdateGrowBoxData(
                await _appGrowBox.Service.GrowBoxEsp.SetLight(new(s)));
        }
    }
    private async Task SetFanSpeed()
    {
        if (_appGrowBox is null)
            return;
        await UpdateGrowBoxData(
            await _appGrowBox.Service.GrowBoxEsp.SetFanSpeed(new (_fanSpeed)));
    }
    
    private async Task UpdatePumps()
    {
        if (_appGrowBox == null) return;
        WaterPumpsEspRoot? last = null;
        foreach (var pump in _waterPumpsRoot?.Pumps ?? Array.Empty<WaterPump>())
        {
            last = await _appGrowBox.Service.WaterPumpsEsp.Set(pump);
        }
        
        if (last is not null) await UpdateWaterPumpsData(last);
    }
    private async Task TestPump(WaterPump pump)
    {
        if (_appGrowBox == null) return;

        var confirm = await OverlayService.ConfirmWaterPumpTest(pump);
        if (!confirm)
            return;
        
        var result = await _appGrowBox.Service.WaterPumpsEsp.Test(pump);
    }
}
