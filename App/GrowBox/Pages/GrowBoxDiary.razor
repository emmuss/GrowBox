@using GrowBox.State
@using Blazor.MinimalApi.Client
@using GrowBox.Abstractions.Model

@page "/growbox/{GrowBoxId:guid}/diary"

@inject IJSRuntime Js
@inject NavigationManager NavigationManager
@inject MinimalHttpClient<DiaryRequest, Diary> DiaryService

@if (_diary != null) 
{
    <RadzenStack Gap="1rem" JustifyContent="JustifyContent.Stretch">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
            <RadzenButton Icon="arrow_back" ButtonStyle="ButtonStyle.Dark" Click=@(() => Js.InvokeVoidAsync("history.back")) />
        </RadzenStack>
        @* TODO: https://github.com/welisonmenezes/wm-blazor-slick-carousel/blob/master/WMBlazorSlickCarousel/WMBSC/BlazorSlickCarousel.razor*@
        <RadzenDataList @ref=_dataList PageSize="1" WrapItems="true" AllowPaging="true" PagerPosition="PagerPosition.Top"
                        Data="@_snapshots.OrderByDescending(x => x.Created)" TItem="DiarySnapshot">
            <Template Context="snapshot">
                <img src="@snapshot.Url" alt="@snapshot.Created" style="width: 100%; height: 45vh; object-fit:cover; border-radius: 8px; margin-top: 0.5rem"/>
                <div style="background-color: var(--rz-paginator-background-color); border-top: var(--rz-paginator-border); border-radius: 0; display: flex; margin: 0.5rem 0 0 0;justify-content: center; align-items: center">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Style="width: 100%">
                        <RadzenText Text="@snapshot.Created.ToString("f")" Style="margin-bottom: 0"/>
                        <a href="@snapshot.Url" target="_blank">
                            <RadzenIcon Icon="attach_file"/>
                        </a>
                    </RadzenStack>
                </div>
            </Template>
        </RadzenDataList>
        @if (_snapShotFilters.Count > 0)
        {
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceEvenly" Wrap="FlexWrap.Wrap">
                @foreach (var filter in _snapShotFilters)
                {
                    var btnStyle = filter.FilterName == _activeFilterName ? ButtonStyle.Primary : ButtonStyle.Dark;
                    <RadzenButton Text="@filter.FilterName" ButtonStyle="@btnStyle" Click=@(() => SetFilter(filter))/>
                }
            </RadzenStack>
        }
    </RadzenStack>    
}


@code
{
    private Diary? _diary;
    private IEnumerable<DiarySnapshot> _snapshots = [];
    private string _activeFilterName = "";
    private RadzenDataList<DiarySnapshot>? _dataList;
    
    [Parameter] public Guid GrowBoxId { get; set; } = Guid.Empty;

    private readonly List<(IEnumerable<DiarySnapshot> Snapshots, string FilterName)> _snapShotFilters = [];

    private void SetFilter((IEnumerable<DiarySnapshot> Snapshots, string FilterName) filter)
    {
        _activeFilterName = filter.FilterName;
        _snapshots = filter.Snapshots;
        if (_dataList is not null)
            _dataList.CurrentPage = 0;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (GrowBoxId == Guid.Empty)
        {
            await base.OnParametersSetAsync();
            return;
        }

        _diary = await DiaryService.Get(new DiaryRequest(GrowBoxId));
        if (_diary == null)
        {
            await base.OnParametersSetAsync();
            return;
        }

        _snapshots = _diary.Snapshots;
        _activeFilterName = "All";
        _snapShotFilters.Clear();
        _snapShotFilters.Add((_diary.Snapshots, "All"));
        foreach (var snapshotGroup in _diary.Snapshots
                     .OrderByDescending(x => x.Created)
                     .GroupBy(x => x.Created.Date))
        {
            var filterName = snapshotGroup.Key.ToString("d");
            if (snapshotGroup.Key > DateTime.Now - TimeSpan.FromDays(7))
                filterName = snapshotGroup.Key.ToString("dddd");
            _snapShotFilters.Add((snapshotGroup, filterName));
        }
        
        await base.OnParametersSetAsync();
    }
}
